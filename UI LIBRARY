--just my ui lib. if u want to use it go ahead lol. i dont feel like adding documentation so just figure it out.

local game = setmetatable({}, {
	__index = function(self, idx, ...)
		return game:FindService(idx) or game[idx] or "Error . . ." 
	end
})

local workspace = game.Workspace
local uis = game.UserInputService
local run = game.RunService
local tweenservice = game.TweenService
local players = game.Players
local player = players.LocalPlayer
local mouse = player:GetMouse()

local camera = workspace.CurrentCamera
local viewsize = camera.ViewportSize;camera:GetPropertyChangedSignal("ViewportSize"):Connect(function()
	viewsize = camera.ViewportSize
end)

local input = {}; do
	local keydown = {}
	local keyboard = Enum.UserInputType.Keyboard
	local mouse1 = Enum.UserInputType.MouseButton1

	input.isKeyDown = function(keycode)
		return keydown[type(keycode) == "string" and keycode or keycode.Value]
	end
	
	uis.InputBegan:connect(function(inp)
		if inp.UserInputType == keyboard then
			local val = inp.KeyCode.Value
			keydown[val] = true
		elseif inp.UserInputType == mouse1 then
			keydown["mouse1"] = true
		end
	end)
	
	uis.InputEnded:connect(function(inp)
		if inp.UserInputType == keyboard then
			local val = inp.KeyCode.Value
			keydown[val] = false
		elseif inp.UserInputType == mouse1 then
			keydown["mouse1"] = false
		end
	end)
end

local drag = {}; do
	local lastDragged; 
	function drag.new(obj, delay)
		obj.MouseButton1Down:Connect(function()
			local mousePos = Vector2.new(mouse.X, mouse.Y)
			local offset = mousePos - obj.AbsolutePosition
			if lastDragged then
				lastDragged.ZIndex = 1
				for k, v in pairs(lastDragged:GetDescendants()) do
					v.ZIndex = 1
				end
			end
			lastDragged = obj
			obj.ZIndex = 2
			for k, v in pairs(obj:GetDescendants()) do
				v.ZIndex = 2
			end
			repeat
				run.RenderStepped:Wait()
				input.dragging = true
				mousePos = Vector2.new(mouse.X, mouse.Y)
				local rel = mousePos - offset
				--obj.Position = UDim2.fromOffset(rel.X, rel.Y)
				obj:TweenPosition(UDim2.fromOffset(rel.X, rel.Y), "Out", "Linear", delay, true)
			until
				not input.isKeyDown("mouse1")
			input.dragging = false
		end)
	end
end

local info = {}; do
	function info.new(obj, txt)
		local info;
		local inGUI;
		obj.MouseEnter:Connect(function()
			if not input.dragging then
				inGUI = true
				info = module:createInfoTab(txt)
				spawn(function()
					repeat
						run.RenderStepped:Wait()
						if info then
							info.Position = UDim2.fromOffset(mouse.X + 15, mouse.Y + 15)
							info.Visible = true
						end
					until
						not inGUI
				end)
			end
		end)
		obj.MouseLeave:Connect(function()
			inGUI = false
			if info then
				info:remove()
				info = nil
			end
		end)
	end
end

local effect = {}; do
	function effect.new(type, obj, color, t)
		if type == "fade" then
			local tweeninfo = TweenInfo.new(t, Enum.EasingStyle.Linear)
			local tween = tweenservice:Create(obj, tweeninfo, {BackgroundColor3 = color})
		    tween:Play()
		end
	end
end

local gui = Instance.new("ScreenGui")
gui.Parent = run:IsStudio() and player.PlayerGui or game.CoreGui
local main;

module = {}; do
	module.gui = gui
	module.open1 = false
	module.categorycount = 0
	module.offsets = {
		picker = 44
		,slider = 30
		,toggle = 30
	}
	module.pickerPositions = {
		UDim2.new(0, 13, 1, 0)
		,UDim2.new(0, 109, 1, 0)
		,UDim2.new(0, 205, 1, 0)
	}
	
	function module:open(full)
		module.open1 = true
		main:TweenPosition(full and UDim2.fromOffset(0, 0) or UDim2.fromOffset(-230, 0), "Out", "Linear", full and 0.065 or 0.15, true)
	end
	
	function module:close()
		module.open1 = false
		main:TweenPosition(UDim2.fromOffset(-318, 0), "Out", "Linear", 0.05, true)
	end
	
	function module:createOBJ(class, parent, properties)
		local obj = Instance.new(class)
		for k, v in pairs(properties) do
			obj[k] = v
		end
		obj.Parent = parent
		return obj
	end;
	
	function module:createInfoTab(text)
		local info = module:createOBJ("TextLabel", gui, {
			BackgroundColor3 = Color3.fromRGB(33, 33, 33)
			,BorderSizePixel = 0
			,Visible = false
			,ZIndex = 3
			,Font = "SourceSans"
			,Text = " " .. text .. " "
			,TextColor3 = Color3.fromRGB(255, 255, 255)
			,TextSize = 13
			,TextXAlignment = "Left"
		});info.Size = UDim2.fromOffset(info.TextBounds.X, 13)
		return info
	end
	
	function module:createCategory(name, tags)
		local category = {}
		local offset = 0
		module.categorycount = module.categorycount + 1
		local button = module:createOBJ("TextButton", main, {
			AutoButtonColor = false
			,BackgroundColor3 = Color3.fromRGB(57, 57, 57)
			,BackgroundTransparency = 0.3
			,BorderSizePixel = 0
			,Name = name
			,Position = UDim2.fromOffset(23, 205 + (47 * (module.categorycount - 1)))
			,Size = UDim2.fromOffset(294, 47)
			,Font = "SourceSansBold"
			,Text = tags.text or name
			,TextColor3 = Color3.fromRGB(255, 255, 255)
			,TextSize = 23
		})
		local function getNextWindowPos()
			local i = module.categorycount
			local pos;
			if i <= 3 then
				pos = UDim2.fromOffset(i * 340, 40)
			elseif i > 3 and i <= 6 then
				i = i - 3
				pos = UDim2.fromOffset(i * 340, 340)
			elseif i > 6 and i <= 9 then
				i = i - 6
				pos = UDim2.fromOffset(i * 340, 640)
			end
			return pos
		end
		local window = module:createOBJ("TextButton", gui, {
			AutoButtonColor = false
			,BackgroundColor3 = Color3.fromRGB(33, 33, 33)
			,BorderSizePixel = 0
			,Name = name
			,Position = getNextWindowPos()
			,Size = UDim2.fromOffset(318, 19)
			,Font = "GothamBold"
			,Text = "  " .. tostring(tags.text or name)
			,TextColor3 = Color3.fromRGB(152, 152, 152)
			,TextSize = 14
			,TextXAlignment = "Left"
			,Visible = false
		})
		local closeWindow = module:createOBJ("TextButton", window, {
			AutoButtonColor = false
			,BackgroundColor3 = Color3.fromRGB(33, 33, 33)
			,BackgroundTransparency = 0.7
			,BorderSizePixel = 0
			,Position = UDim2.new(1, -19, 0, 0)
			,Size = UDim2.fromOffset(19, 19)
			,Font = "GothamBlack"
			,Text = "×"
			,TextColor3 = Color3.fromRGB(107, 107, 107)
			,TextSize = 14
		})
		local windowFrame = module:createOBJ("Frame", window, {
			BackgroundColor3 = Color3.fromRGB(57, 57, 57)
			,BorderSizePixel = 0
			,Position = UDim2.fromScale(0, 1)
			,Size = UDim2.new(1, 0, 0, offset)
		})
		
		drag.new(window, 0.05)
		
		local function updateWindow()
			windowFrame.Size = UDim2.new(1, 0, 0, offset + 12)
		end
		
		local function toggleWindow()
			local state = not window.Visible
			effect.new("fade", button, state and Color3.fromRGB(120, 134, 255) or Color3.fromRGB(57, 57, 57), 0.2)
			window.Visible = state
		end
		
		function category:createToggle(name, tags, func)
			local state = tags.default
			local toggleLabel = module:createOBJ("TextLabel", windowFrame, {
				BackgroundTransparency = 1
				,Name = name
				,Position = UDim2.fromOffset(46, 4 + offset)
				,Font = "SourceSansBold"
				,Text = tags.text or name
				,TextColor3 = Color3.fromRGB(255, 255, 255)
				,TextSize = 14
				,TextXAlignment = "Left"
			});offset = offset + module.offsets.toggle
			toggleLabel.Size = UDim2.fromOffset(toggleLabel.TextBounds.X + 3, 30)
			if tags.info then
				info.new(toggleLabel, tags.info)
			end
			local toggleButton = module:createOBJ("TextButton", toggleLabel, {
				Position = UDim2.fromOffset(-36, 3)
				,Size = UDim2.fromOffset(25, 25)
				,Style = "RobloxRoundDefaultButton"
				,Text = tags.default and "×" or ""
				,TextColor3 = Color3.fromRGB(255, 255, 255)
				,TextSize = 16
			})
			
			if state ~= nil and func then
				func(state)
			end
			
			toggleButton.MouseButton1Click:Connect(function()
				state = not state
				if func then
					func(state)
				end
				toggleButton.Text = state and "×" or ""
			end)
			
			updateWindow()
		end
		
		function category:createSlider(name, tags, func)
			local sliderLabel = module:createOBJ("TextLabel", windowFrame, {
				BackgroundTransparency = 1
				,Name = name
				,Position = UDim2.fromOffset(10, 4 + offset)
				,Font = "SourceSansBold"
				,Text = tags.text or name
				,TextColor3 = Color3.fromRGB(255, 255, 255)
				,TextSize = 14
				,TextXAlignment = "Left"
			});offset = offset + module.offsets.slider
			sliderLabel.Size = UDim2.fromOffset(sliderLabel.TextBounds.X + 3, 30)
			if tags.info then
				info.new(sliderLabel, tags.info)
			end
			local slider = module:createOBJ("TextButton", sliderLabel, {
				AutoButtonColor = false
				,BackgroundColor3 = Color3.fromRGB(152, 152, 152)
				,BorderSizePixel = 0
				,Name = name
				,Position = UDim2.fromOffset(10 + sliderLabel.TextBounds.X, 15)
				,Size = UDim2.fromOffset(85, 5)
				,Text = ""
			})
			local numberLabel = module:createOBJ("TextLabel", sliderLabel, {
				BackgroundColor3 = Color3.fromRGB(31, 31, 31)
				,BackgroundTransparency = 1
				,Position = UDim2.fromOffset(slider.Position.X.Offset + 13 + slider.Size.X.Offset, 11)
				,Size = UDim2.fromOffset(12, 12)
				,Font = "SourceSans"
				,Text = tags.default or ""
				,TextXAlignment = "Left"
				,TextColor3 = Color3.fromRGB(255, 255, 255)
				,TextSize = 14
			})
			local cover = module:createOBJ("TextLabel", slider, {
				BackgroundColor3 = Color3.fromRGB(120, 134, 255)
				,BorderSizePixel = 0
				,Name = name
				,Position = UDim2.new()
				,Size = UDim2.fromOffset(0, 5)
				,Text = ""
			})
			
			cover.Size = UDim2.fromOffset((tags.default or 0) * (85 / tags.max), 5)
			
			if func and tags.default then
				func(tags.default)
			end
			
			slider.MouseButton1Down:Connect(function()
				input.dragging = true
				repeat
					run.RenderStepped:Wait()
					local mousePos = Vector2.new(mouse.X, mouse.Y)
					local rel = mousePos - slider.AbsolutePosition
					rel = math.clamp(rel.X, 0, slider.AbsoluteSize.X)
					cover.Size = UDim2.fromOffset(rel, 5)
					if func then
						rel = rel * (tags.max / 85)
						if tags.round then
							rel = math.floor(rel + 0.5)
						end
						if rel >= 1000 then
							numberLabel.Text = ("%.4s"):format(rel)
						elseif rel >= 100 then
							numberLabel.Text = ("%.3s"):format(rel)
						elseif rel >= 10 then
							numberLabel.Text = ("%.2s"):format(rel)
						elseif rel >= 1 then
							numberLabel.Text = ("%.3s"):format(rel)
						elseif rel >= 0.1 then
							numberLabel.Text = ("%.4s"):format(rel)
						elseif rel >= 0.01 then
							numberLabel.Text = ("%.5s"):format(rel)
						elseif rel >= 0 then
							numberLabel.Text = "0"
						end
						func(rel)
					end
				until
					not input.isKeyDown("mouse1")
				input.dragging = false
			end)
			
			updateWindow()
		end
		
		function category:createPicker(name, tags, array, func) -- Only 1 - 3 items at the moment.
			local oldChoice = tags.default;
			local didThisAlready = false
			local choices = {}
			local pickerLabel = module:createOBJ("TextLabel", windowFrame, {
				BackgroundTransparency = 1
				,Name = name
				,Position = UDim2.fromOffset(10, 4 + offset)
				,Font = "SourceSansBold"
				,Text = tags.text or name
				,TextColor3 = Color3.fromRGB(255, 255, 255)
				,TextSize = 14
				,TextXAlignment = "Left"
			});offset = offset + module.offsets.picker
			pickerLabel.Size = UDim2.fromOffset(pickerLabel.TextBounds.X + 3, 30)
			if tags.info then
				info.new(pickerLabel, tags.info)
			end
			for n = 1, #array do
				local choice = module:createOBJ("TextButton", pickerLabel, {
					AutoButtonColor = false
					,BackgroundColor3 = Color3.fromRGB(95, 95, 95)
					,BorderSizePixel = 0
					,Name = array[n]
					,Position = module.pickerPositions[n]
					,Size = UDim2.fromOffset(80, 14)
					,Font = "SourceSans"
					,Text = array[n]
					,TextColor3 = Color3.fromRGB(255, 255, 255)
					,TextSize = 12
				});choices[array[n]] = choice
				choice.MouseButton1Click:Connect(function()
					if array[n] ~= oldChoice then
						if oldChoice then
							effect.new("fade", choices[oldChoice], Color3.fromRGB(95, 95, 95), 0.1)
						end
						effect.new("fade", choice, Color3.fromRGB(120, 134, 255), 0.1)
						
						if func then
							func(tags.returnArguments[n])
						end
						
						oldChoice = array[n]
					end
				end)
				if array[n] == tags.default and func and not didThisAlready then
					didThisAlready = true
					effect.new("fade", choice, Color3.fromRGB(120, 134, 255), 0.1)
					if func then
						func(tags.returnArguments[n])
					end
				end
			end
			
			updateWindow()
		end
		
		closeWindow.MouseEnter:Connect(function()
			effect.new("fade", closeWindow, Color3.fromRGB(255, 0, 0), 0.2)
		end)
		
		closeWindow.MouseLeave:Connect(function()
			effect.new("fade", closeWindow, Color3.fromRGB(33, 33, 33), 0.2)
		end)
		
		closeWindow.MouseButton1Click:Connect(function()
			toggleWindow()
		end)
		
		button.MouseButton1Click:Connect(function()
			toggleWindow()
		end)
		
		return category
	end

	setmetatable(module, {
		__newindex = function(self, idx, val)
			if idx == "guiname" then
				local name = module:createOBJ("TextLabel", main, {
					BackgroundTransparency = 1
					,Position = UDim2.fromOffset(23, 80)
					,Size = UDim2.new(1, -23, 0, 48)
					,Font = "GothamBold"
					,Text = val
					,TextColor3 = Color3.fromRGB(255, 255, 255)
					,TextSize = 20
				})
				return name
			elseif idx == "creditme" then
				local credit = module:createOBJ("TextButton", main, {
					AutoButtonColor = false
					,BackgroundTransparency = 1
					,Position = UDim2.new(0, 13, 1, -60)
					,Size = UDim2.new(1, -13, 0, 50)
					,Font = "GothamBold"
					,Text = val
					,TextColor3 = Color3.fromRGB(132, 132, 132)
					,TextSize = 16
				})
				credit.MouseButton1Click:Connect(function()
					syn.write_clipboard(val)
					credit.Text = "Copied!"
					delay(0.3, function()
						if credit.Text == "Copied!" then
							credit.Text = val
						end
					end)
				end)
				return credit 
			end
			rawset(module, idx, val)
		end	
	})
end

main = module:createOBJ("Frame", gui, {
	BackgroundColor3 = Color3.fromRGB(57, 57, 57)
	,BorderSizePixel = 0
	,Position = UDim2.fromOffset(-318, 0)
	,Size = UDim2.new(0, 318, 1, 0)
})
local accent = module:createOBJ("Frame", main, {
	BackgroundColor3 = Color3.fromRGB(120, 134, 255)
	,BorderSizePixel = 0
	,Position = UDim2.new()
	,Size = UDim2.new(0, 23, 1, 0)
})

delay(1, function()
	local Options = module:createCategory("Options", {}); do
		local closeType = Options:createPicker("GUI Opening Method", 
			{text="GUI Opening Method";info="Changes the style in which the GUI is opened/closed.";returnArguments={"Linear","Segmented","KeyBind"};default="Linear (Mouse)"},{"Linear (Mouse)","Segmented (Mouse)","KeyBind (F6)"},
			function(method)
				OptionsCloseMethod = method
			end
		)
	end;module.creditme = "https://discord.gg/AUJ9S6s"
	uis.InputBegan:Connect(function(_input, ignore)
		if _input.UserInputType == Enum.UserInputType.Keyboard then
			if OptionsCloseMethod == "KeyBind" and _input.KeyCode == Enum.KeyCode.F6 then
				spawn(function()
					if module.open1 then
						module:open(false)
						wait(0.1)
						module:close()
					else
						module:open(true)
					end
				end)
			end
		end
	end)
	uis.InputChanged:Connect(function(_input, ignore)
		if _input.UserInputType == Enum.UserInputType.MouseMovement and not input.dragging then
			local mousePos = Vector2.new(mouse.X, mouse.Y)
			local offsets = {
				fullopen = main.Size.X.Offset
				,halfopen = main.Size.X.Offset + 100
			}
			local function f(x)
				local y = -3.18 * x + 1011.24
				return y
			end
			if mousePos.X <= offsets.halfopen and mousePos.X > offsets.fullopen then
				if OptionsCloseMethod == "Linear" then
					main:TweenPosition(UDim2.fromOffset(f(mousePos.X), 0), "Out", "Linear", 0.1, true)
					module.open1 = true
				elseif OptionsCloseMethod == "Segmented" then
					module:open(false)
				end
			elseif mousePos.X < offsets.fullopen then
				if OptionsCloseMethod == "Linear" then
					main:TweenPosition(UDim2.fromOffset(0, 0), "Out", "Linear", 0.1, true)
					module.open1 = true
				elseif OptionsCloseMethod == "Segmented" then
					module:open(true)
				end
			elseif mousePos.X > offsets.halfopen then
				if OptionsCloseMethod == "Linear" then
					main:TweenPosition(UDim2.fromOffset(-318, 0), "Out", "Linear", 0.1, true)
					module.open1 = false
				elseif OptionsCloseMethod == "Segmented" then
					module:close()
				end
			end
		end
	end)
end)

return module
